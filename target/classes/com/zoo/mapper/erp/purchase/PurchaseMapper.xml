<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zoo.mapper.erp.purchase.PurchaseMapper">
	<resultMap type="com.zoo.model.erp.purchase.Purchase" id="BaseResultMap">
		<id column="id" property="id"/>
		<result column="code" property="code"/>
		<result column="initDate" property="initDate"/>
		<result column="ctime" property="ctime"/>
		<result column="etime" property="etime"/>
		<result column="isClaimed" property="isClaimed"/>
		<association column="supplierId" property="supplier" select="com.zoo.mapper.erp.purchase.SupplierMapper.getSupplierById"></association>
		<association column="cuserId" property="cuser" select="com.zoo.mapper.system.user.SystemUserMapper.getUserById"></association>
		<association column="accountId" property="supplierAccount" select="com.zoo.mapper.erp.purchase.SupplierAccountMapper.getSupplierAccountById"></association>
		<collection column="id" property="details" select="com.zoo.mapper.erp.purchase.PurchaseDetailMapper.getDetailByPurchaseId"></collection>
		<collection column="id" property="annexs" select="com.zoo.mapper.annex.AnnexMapper.getAnnexsByForeignKey"></collection>
	</resultMap>
	<select id="getPurchaseByPage" resultMap="BaseResultMap">
		select DISTINCT
			pur.* 
		from 
			purchase pur left join purchase_detail pd on pd.purchaseId=pur.id
						left join product p on pd.productId = p.id
						left join supplier s on pur.supplierId = s.id
		where pur.companyId=#{companyId}
		<if test="keywords!=null and keywords!=''">
			AND (pur.code like concat('%',#{keywords},'%') or p.code like concat('%',#{keywords},'%') or p.name like concat('%',#{keywords},'%') or s.supplierName like concat('%',#{keywords},'%'))
		</if>
		<if test="code!=null and code!=''">
			AND pur.code like concat('%',#{code},'%')
		</if>
		<if test="productCode!=null and productCode!=''">
			AND p.code like concat('%',#{productCode},'%')
		</if>
		<if test="productName!=null and productName!=''">
			AND p.name like concat('%',#{productName},'%')
		</if>
		<if test="supplierName!=null and supplierName!=''">
			AND s.supplierName like concat('%',#{supplierName},'%')
		</if>
		<if test="start_initDate!=null and start_initDate!=''">
			AND pur.initDate <![CDATA[ >= ]]> #{start_initDate}
		</if>
		<if test="end_initDate!=null and end_initDate!=''">
			AND pur.initDate <![CDATA[ <= ]]> #{end_initDate}
		</if>
		<if test="start_ctime!=null and start_ctime!=''">
			AND pur.ctime <![CDATA[ >= ]]> #{start_ctime}
		</if>
		<if test="end_ctime!=null and end_ctime!=''">
			AND pur.ctime <![CDATA[ <= ]]> #{end_ctime}
		</if>
		<if test="status!=null and status.length>0">
			AND pur.status in 
			<foreach collection="status" separator="," open="(" close=")" item="status">
            	#{status}
        	</foreach>
		</if>
		<if test="cuserId!=null and cuserId!=''">
			AND pur.cuserId = #{cuserId}
		</if>
		ORDER BY ${sort} ${order} 
		<if test="start!=null and size!=null">
			limit #{start},#{size}
		</if>
	</select>
	<select id="getCount" resultType="long">
		select 
			count(DISTINCT pur.id) 
		from 
			purchase pur left join purchase_detail pd on pd.purchaseId=pur.id
						left join product p on pd.productId = p.id
						left join supplier s on pur.supplierId = s.id
		where pur.companyId=#{companyId}
		<if test="keywords!=null and keywords!=''">
			AND (pur.code like concat('%',#{keywords},'%') or p.code like concat('%',#{keywords},'%') or p.name like concat('%',#{keywords},'%') or s.supplierName like concat('%',#{keywords},'%'))
		</if>
		<if test="code!=null and code!=''">
			AND pur.code like concat('%',#{code},'%')
		</if>
		<if test="productCode!=null and productCode!=''">
			AND p.code like concat('%',#{productCode},'%')
		</if>
		<if test="productName!=null and productName!=''">
			AND p.name like concat('%',#{productName},'%')
		</if>
		<if test="supplierName!=null and supplierName!=''">
			AND s.supplierName like concat('%',#{supplierName},'%')
		</if>
		<if test="start_initDate!=null and start_initDate!=''">
			AND pur.initDate <![CDATA[ >= ]]> #{start_initDate}
		</if>
		<if test="end_initDate!=null and end_initDate!=''">
			AND pur.initDate <![CDATA[ <= ]]> #{end_initDate}
		</if>
		<if test="start_ctime!=null and start_ctime!=''">
			AND pur.ctime <![CDATA[ >= ]]> #{start_ctime}
		</if>
		<if test="end_ctime!=null and end_ctime!=''">
			AND pur.ctime <![CDATA[ <= ]]> #{end_ctime}
		</if>
	</select>
	<select id="getPurchaseById" resultMap="BaseResultMap">
	
		select * from purchase where id=#{id}
	</select>
	<insert id="addPurchase">
		insert into purchase (
			id,
			initDate,
			code,
			supplierId,
			cuserId,
			ctime,
			etime,
			processInstanceId,
			status,
			companyId,
			accountId,
			accountContext,
			paymentType,
			freightType,
			description
		)values(
			#{purchase.id},
			#{purchase.initDate},
			#{purchase.code},
			#{purchase.supplier.id},
			#{purchase.cuserId},
			#{purchase.ctime},
			#{purchase.etime},
			#{purchase.processInstanceId},
			#{purchase.status},
			#{purchase.companyId},
			#{purchase.supplierAccount.id},
			#{purchase.accountContext},
			#{purchase.paymentType},
			#{purchase.freightType},
			#{purchase.description}
		)
	</insert>
	<update id="updatePurchase">
		update purchase set 
			initDate=#{purchase.initDate},
			supplierId=#{purchase.supplier.id},
			accountId=#{purchase.supplierAccount.id},
			accountContext=#{purchase.accountContext},
			paymentType=#{purchase.paymentType},
			freightType=#{purchase.freightType},
			description=#{purchase.description}
		where id=#{purchase.id}
	</update>
	<update id="updateProcessInstanceId">
		update purchase set processInstanceId=#{processInstanceId} where id=#{id}
	</update>
	<update id="updatePurchaseStatus">
		UPDATE 
			purchase 
		SET 
			status = #{condition.status} 
			<if test="condition.isClaimed!=null">
			,isClaimed = #{condition.isClaimed} 
			</if>
			<if test="condition.etime!=null">
				,etime = #{condition.etime} 
			</if> 
			 
		WHERE id = #{condition.id}
	</update>
	<update id="updatePurchaseIsClaimed">
		update purchase set isClaimed = #{condition.isClaimed} where id = #{condition.id} 
	</update>
	<delete id="deletePurchaseById">
		delete from purchase where id in 
		<foreach collection="ids" separator="," open="(" close=")" item="id">
            #{id}
        </foreach>
	</delete>
</mapper>